{
  "name": "levelgraph",
  "version": "0.10.5",
  "description": "A graph database for Node.js and the browser built on top of LevelUp",
  "main": "lib/levelgraph.js",
  "scripts": {
    "test": "mocha --recursive --bail --reporter spec test",
    "zuul": "zuul test/common.js test/*spec.js",
    "coverage": "rm -rf coverage; istanbul cover _mocha -- --recursive --reporter spec --bail",
    "publish-coverage": "cat coverage/lcov.info | coveralls",
    "ci": "mocha --recursive --bail --watch test",
    "jshint-lib": "jshint lib/*.js",
    "jshint-test": "jshint test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mcollina/levelgraph.git"
  },
  "bugs": {
    "url": "http://github.com/mcollina/levelgraph/issues"
  },
  "pre-commit": [
    "jshint-lib",
    "jshint-test",
    "test"
  ],
  "keywords": [
    "leveldb",
    "graph",
    "level",
    "database",
    "triples",
    "triple"
  ],
  "engines": {
    "node": ">= 0.10 < 0.13",
    "npm": ">= 1.4.0",
    "iojs": ">= 1.0.0"
  },
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "license": "MIT",
  "devDependencies": {
    "browserify": "~6.1.0",
    "chai": "^1.9.2",
    "coveralls": "^2.11.2",
    "istanbul": "~0.3.2",
    "jshint": "~2.5.6",
    "level-subkey": "^7.7.1",
    "level-sublevel": "^6.3.15",
    "level-test": "~1.6.5",
    "levelup": "~0.19.0",
    "mocha": "^1.16.2",
    "osenv": "^0.1.0",
    "pre-commit": "0.0.9",
    "setimmediate": "^1.0.2",
    "sinon": "~1.10.3",
    "sinon-chai": "^2.6.0",
    "uglify-js": "~2.4.8",
    "zuul": "^1.11.2"
  },
  "dependencies": {
    "xtend": "~4.0.0",
    "callback-stream": "~1.0.0",
    "async": "~0.9.0",
    "readable-stream": "~1.0.17",
    "level-write-stream": "~1.0.0",
    "levelup": ">= 0.10.0 < 0.20.0",
    "leveldown": "> 0.7.0 < 0.11.0",
    "level-js": "~2.1.6"
  },
  "browser": {
    "./lib/getdb.js": "./lib/getdb-browser.js"
  },
  "testling": {
    "browsers": [
      "ie/latest",
      "firefox/latest",
      "chrome/latest",
      "opera/latest"
    ],
    "harness": "mocha",
    "files": "test/*.js"
  },
  "readme": "LevelGraph&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/mcollina/levelgraph.png)](https://travis-ci.org/mcollina/levelgraph)&nbsp;[![Coverage Status](https://coveralls.io/repos/mcollina/levelgraph/badge.png)](https://coveralls.io/r/mcollina/levelgraph)&nbsp;[![Dependency Status](https://david-dm.org/mcollina/levelgraph.png?theme=shields.io)](https://david-dm.org/mcollina/levelgraph)\n===========\n\n![Logo](https://github.com/mcollina/node-levelgraph/raw/master/logo.png)\n\n[![NPM](https://nodei.co/npm/levelgraph.png)](https://nodei.co/npm/levelgraph/)\n\n[![NPM](https://nodei.co/npm-dl/levelgraph.png)](https://nodei.co/npm/levelgraph/)\n\n[![Browser support](https://saucelabs.com/browser-matrix/levelgraph.svg)](https://saucelabs.com/u/levelgraph)\n\n__LevelGraph__ is a Graph Database. Unlike many other graph database,\n__LevelGraph__ is built on the uber-fast key-value store\n[LevelDB](http://code.google.com/p/leveldb/) through the powerful\n[LevelUp](https://github.com/rvagg/node-levelup) library.\nYou can use it inside your node.js application or in any\nIndexedDB-powered Browser. PhoneGap support coming soon (late fall).\n\n__LevelGraph__ loosely follows the __Hexastore__ approach as presented in the article:\n[Hexastore: sextuple indexing for semantic web data management\nC Weiss, P Karras, A Bernstein - Proceedings of the VLDB Endowment,\n2008](http://www.vldb.org/pvldb/1/1453965.pdf).\nFollowing this approach, __LevelGraph__ uses six indices for every triple,\nin order to access them as fast as it is possible.\n\nCheck out a [slideshow](http://nodejsconfit.levelgraph.io)\nthat introduces you to LevelGraph by\n[@matteocollina](http://twitter.com/matteocollina) at\nhttp://nodejsconf.it.\n\n**LevelGraph** is an **OPEN Open Source Project**, see the <a href=\"#contributing\">Contributing</a> section to find out what this means.\n\n\n## Table of Contents\n\n* [Install](#install)\n* [Usage](#usage)\n  * [Get and Put](#get-and-put)\n    * [Triple Properties](#triple-properties)\n    * [Limit and Offset](#limit-and-offset)\n    * [Reverse Order](#reverse-order)\n    * [Updating](#updating)\n    * [Multiple Puts](#multiple-puts)\n  * [Deleting](#deleting)\n  * [Searches](#searches)\n    * [Search Without Streams](#search-without-streams)\n    * [Triple Generation](#triple-generation)\n    * [Limit and Offset](#limit-and-offset-1)\n  * [Filtering](#filtering)\n  * [Putting and Deleting through Streams](#putting-and-deleting-through-streams)\n  * [Generate batch operations](#generate-batch-operations)\n* [Navigator API](#navigator-api)\n* [LevelUp integration](#levelup-integration)\n* [Browserify](#browserify)\n* [RDF support](#rdf-support)\n* [Extensions](#extensions)\n* [TODO](#todo)\n* [Contributing](#contributing)\n* [Credits](#credits)\n* [Contributors](#contributors)\n* [LICENSE - \"MIT License\"](#license---mit-license)\n\n\n## Install\n### On Node.js\n\n```\nnpm install levelgraph --save\n```\n\nAt the moment it requires node v0.10.x, but the port to node v0.8.x\nshould be straighforward.\nIf you need it, just open a pull request.\n\n### In the Browser\n\nJust download\n[levelgraph.min.js](https://github.com/mcollina/levelgraph/blob/master/build/levelgraph.min.js)\nand you are done!\n\n## Usage\n\nThe LevelGraph API remains the same for Node.js and the browsers,\nhowever the initialization change slightly.\n\nInitializing a database is very easy:\n```javascript\nvar levelgraph = require(\"levelgraph\"); // not needed in the Browser\nvar db = levelgraph(\"yourdb\");\n```\n\n### Get and Put\n\nInserting a triple in the database is extremely easy:\n```javascript\nvar triple = { subject: \"a\", predicate: \"b\", object: \"c\" };\ndb.put(triple, function(err) {\n  // do something after the triple is inserted\n});\n```\n\nRetrieving it through pattern-matching is extremely easy:\n```javascript\ndb.get({ subject: \"a\" }, function(err, list) {\n  console.log(list);\n});\n```\n\nIt even supports a Stream interface:\n```javascript\nvar stream = db.getStream({ predicate: \"b\" });\nstream.on(\"data\", function(data) {\n  console.log(data);\n});\n```\n\n#### Triple Properties\n\nLevelGraph supports adding properties to triples with very\nlittle overhead (apart from storage costs). It is very easy:\n```javascript\nvar triple = { subject: \"a\", predicate: \"b\", object: \"c\", \"someStuff\": 42 };\ndb.put(triple, function() {\n  db.get({ subject: \"a\" }, function(err, list) {\n    console.log(list);\n  });\n});\n```\n\n#### Limit and Offset\n\nIt is possible to implement pagination of get results by using\n`'offset'` and `'limit'`, like so:\n\n```javascript\ndb.get({ subject: \"a\", limit: 4, offset: 2}, function(err, list) {\n  console.log(list);\n});\n```\n\n#### Reverse Order\n\nIt is possible to get results in reverse lexicographical order\nusing the `'reverse'` option. This option is only supported by\n`get()` and `getStream()` and not available in `search()`.\n\n```javascript\ndb.get({ predicate: \"b\", reverse: true }, function (err, list) {\n  console.log(list);\n});\n```\n\n\n#### Updating\n\n__LevelGraph__ does not support in-place update, as there are no\nconstraint in the graph.\nIn order to update a triple, you should first delete it:\n```javascript\nvar triple = { subject: \"a\", predicate: \"b\", object: \"c\" };\ndb.put(triple, function(err) {\n  db.del(triple, function(err) {\n    triple.object = 'd';\n    db.put(triple, function(err) {\n      // do something with your update\n    });\n  });\n});\n```\n\n#### Multiple Puts\n\n__LevelGraph__ also supports putting multiple triples:\n```javascript\nvar triple1 = { subject: \"a1\", predicate: \"b\", object: \"c\" };\nvar triple2 = { subject: \"a2\", predicate: \"b\", object: \"d\" };\ndb.put([triple1, triple2],  function(err) {\n  // do something after the triples are inserted\n});\n```\n\n### Deleting\n\nDeleting is easy too:\n```javascript\nvar triple = { subject: \"a\", predicate: \"b\", object: \"c\" };\ndb.del(triple, function(err) {\n  // do something after the triple is deleted\n});\n```\n\n\n### Searches\n\n__LevelGraph__ also supports searches:\n```javascript\ndb.put([{\n  subject: \"matteo\",\n  predicate: \"friend\",\n  object: \"daniele\"\n}, {\n  subject: \"daniele\",\n  predicate: \"friend\",\n  object: \"matteo\"\n}, {\n  subject: \"daniele\",\n  predicate: \"friend\",\n  object: \"marco\"\n}, {\n  subject: \"lucio\",\n  predicate: \"friend\",\n  object: \"matteo\"\n}, {\n  subject: \"lucio\",\n  predicate: \"friend\",\n  object: \"marco\"\n}, {\n  subject: \"marco\",\n  predicate: \"friend\",\n  object: \"davide\"\n}], function () {\n\n  var stream = db.searchStream([{\n    subject: \"matteo\",\n    predicate: \"friend\",\n    object: db.v(\"x\")\n  }, {\n    subject: db.v(\"x\"),\n    predicate: \"friend\",\n    object: db.v(\"y\")\n  }, {\n    subject: db.v(\"y\"),\n    predicate: \"friend\",\n    object: \"davide\"\n  }]);\n\n  stream.on(\"data\", function(data) {\n    // this will print \"{ x: 'daniele', y: 'marco' }\"\n    console.log(data);\n  });\n});\n```\n\n#### Search Without Streams\n\nIt also supports a similar API without streams:\n```javascript\ndb.put([{\n //...\n}], function () {\n\n  db.search([{\n    subject: \"matteo\",\n    predicate: \"friend\",\n    object: db.v(\"x\")\n  }, {\n    subject: db.v(\"x\"),\n    predicate: \"friend\",\n    object: db.v(\"y\")\n  }, {\n    subject: db.v(\"y\"),\n    predicate: \"friend\",\n    object: \"davide\"\n  }], function(err, results) {\n    // this will print \"[{ x: 'daniele', y: 'marco' }]\"\n    console.log(results);\n  });\n});\n```\n\n#### Triple Generation\n\nIt also allows to generate a stream of triples, instead of a solution:\n```javascript\n  db.search([{\n    subject: db.v(\"a\"),\n    predicate: \"friend\",\n    object: db.v(\"x\")\n  }, {\n    subject: db.v(\"x\"),\n    predicate: \"friend\",\n    object: db.v(\"y\")\n  }, {\n    subject: db.v(\"y\"),\n    predicate: \"friend\",\n    object: db.v(\"b\")\n  }], {\n    materialized: {\n      subject: db.v(\"a\"),\n      predicate: \"friend-of-a-friend\",\n      object: db.v(\"b\")\n    }\n  }, function(err, results) {\n    // this will print all the 'friend of a friend triples..'\n    // like so: {\n    //   subject: \"lucio\",\n    //   predicate: \"friend-of-a-friend\",\n    //   object: \"daniele\"\n    // }\n  });\n```\n\n#### Limit and Offset\n\nIt is possible to implement pagination of search results by using\n`'offset'` and `'limit'`, like so:\n\n```javascript\ndb.search([{\n    subject: db.v(\"a\"),\n    predicate: \"friend\",\n    object: db.v(\"x\")\n  }, {\n    subject: db.v(\"x\"),\n    predicate: \"friend\",\n    object: db.v(\"y\")\n  }], { limit: 4, offset: 2 }, function(err, list) {\n\n  console.log(list);\n});\n```\n\n### Filtering\n\n__LevelGraph__ supports filtering of triples when calling `get()`\n and solutions when calling `search()`, and streams are supported too.\n\nIt is possible to filter the matching triples during a `get()`:\n```javascript\ndb.get({\n    subject: 'matteo'\n  , predicate: 'friend'\n  , filter: function filter(triple) {\n      return triple.object !== 'daniele';\n    }\n}, function process(err, results) {\n  // results will not contain any triples that\n  // have 'daniele' as object\n});\n```\n\nMoreover, it is possible to filter the triples during a `search()`\n```javascript\ndb.search({\n    subject: 'matteo'\n  , predicate: 'friend'\n  , object: db.v('x')\n  , filter: function filter(triple) {\n      return triple.object !== 'daniele';\n    }\n}, function process(err, solutions) {\n  // results will not contain any solutions that\n  // have { x: 'daniele' }\n});\n```\n\nFinally, __LevelGraph__ supports filtering full solutions:\n```javascript\ndb.search({\n    subject: 'matteo'\n  , predicate: 'friend'\n  , object: db.v('x')\n}, {\n    filter: function filter(solution, callback) {\n      if (solution.x !== 'daniele') {\n        // confirm the solution\n        callback(null, solution);\n      } else {\n        // refute the solution\n        callback(null);\n      }\n    }\n}, function process(err, solutions) {\n  // results will not contain any solutions that\n  // have { x: 'daniele' }\n});\n```\n\nThanks to solultion filtering, it is possible to implement a negation:\n```javascript\ndb.search({\n    subject: 'matteo'\n  , predicate: 'friend'\n  , object: db.v('x')\n}, {\n    filter: function filter(solution, callback) {\n      db.get({\n          subject: solution.x\n        , predicate: 'friend'\n        , object: 'marco'\n      }, function (err, results) {\n        if (err) {\n          callback(err);\n          return;\n        }\n        if (results.length > 0) {\n          // confirm the solution\n          callback(null, solution);\n        } else {\n          // refute the solution\n          callback();\n        }\n      });\n    }\n}, function process(err, solutions) {\n  // results will not contain any solutions that\n  // do not satisfy the filter\n});\n```\n\nThe heavier method is filtering solutions, so we recommend filtering the\ntriples whenever possible.\n\n\n### Putting and Deleting through Streams\n\nIt is also possible to `put` or `del` triples from the store\nusing a `Stream2` interface:\n\n```javascript\nvar t1 = { subject: \"a\", predicate: \"b\", object: \"c\" };\nvar t2 = { subject: \"a\", predicate: \"b\", object: \"d\" };\nvar stream = db.putStream();\n\nstream.write(t1);\nstream.end(t2);\n\nstream.on(\"close\", function() {\n  // do something, the writes are done\n});\n```\n\n### Generate batch operations\n\nYou can also generate a `put` and `del` batch, so you can\nmanage the batching yourself:\n\n```javascript\nvar triple = { subject: \"a\", predicate: \"b\", object: \"c\" };\n\n// Produces a batch of put operations\nvar putBatch = db.generateBatch(triple);\n\n// Produces a batch of del operations\nvar delBatch = db.generateBatch(triple, 'del');\n```\n\n## Navigator API\n\nThe Navigator API is a fluent API for LevelGraph, loosely inspired by\n[Gremlin](http://markorodriguez.com/2011/06/15/graph-pattern-matching-with-gremlin-1-1/)\nIt allows to specify how to search our graph in a much more compact way and navigate\nbetween vertexes.\n\nHere is an example, using the same dataset as before:\n```javascript\n    db.nav(\"matteo\").archIn(\"friend\").archOut(\"friend\").\n      solutions(function(err, results) {\n      // prints:\n      // [ { x0: 'daniele', x1: 'marco' },\n      //   { x0: 'daniele', x1: 'matteo' },\n      //   { x0: 'lucio', x1: 'marco' },\n      //   { x0: 'lucio', x1: 'matteo' } ]\n      console.log(results);\n    });\n```\n\nThe above example match the same triples of:\n```javascript\n    db.search([{\n      subject: db.v(\"x0\"),\n      predicate: 'friend',\n      object: 'matteo'\n    }, {\n      subject: db.v(\"x0\"),\n      predicate: 'friend',\n      object: db.v(\"x1\")\n    }], function(err, results) {\n      // prints:\n      // [ { x0: 'daniele', x1: 'marco' },\n      //   { x0: 'daniele', x1: 'matteo' },\n      //   { x0: 'lucio', x1: 'marco' },\n      //   { x0: 'lucio', x1: 'matteo' } ]\n      console.log(results);\n    });\n```\n\nIt allows to see just the last reached vertex:\n```javascript\n    db.nav(\"matteo\").archIn(\"friend\").archOut(\"friend\").\n      values(function(err, results) {\n      // prints [ 'marco', 'matteo' ]\n      console.log(results);\n    });\n```\n\nVariable names can also be specified, like so:\n```javascript\ndb.nav(\"marco\").archIn(\"friend\").as(\"a\").archOut(\"friend\").archOut(\"friend\").as(\"a\").\n      solutions(function(err, friends) {\n\n  console.log(friends); // will print [{ a: \"daniele\" }]\n});\n```\n\nVariables can also be bound to a specific value, like so:\n```javascript\ndb.nav(\"matteo\").archIn(\"friend\").bind(\"lucio\").archOut(\"friend\").bind(\"marco\").\n      values(function(err, friends) {\n  console.log(friends); // this will print ['marco']\n});\n```\n\nA materialized search can also be produced, like so:\n```javascript\ndb.nav(\"matteo\").archOut(\"friend\").bind(\"lucio\").archOut(\"friend\").bind(\"marco\").\n      triples({:\n        materialized: {\n        subject: db.v(\"a\"),\n        predicate: \"friend-of-a-friend\",\n        object: db.v(\"b\")\n      }\n    }, function(err, results) {\n\n  // this will return all the 'friend of a friend triples..'\n  // like so: {\n  //   subject: \"lucio\",\n  //   predicate: \"friend-of-a-friend\",\n  //   object: \"daniele\"\n  // }\n\n  console.log(results);\n});\n```\n\nIt is also possible to change the current vertex:\n```javascript\ndb.nav(\"marco\").archIn(\"friend\").as(\"a\").go(\"matteo\").archOut(\"friend\").as(\"b\").\n      solutions(function(err, solutions) {\n\n   //  solutions is: [{\n   //    a: \"daniele\",\n   //    b: \"daniele\"\n   //   }, {\n   //     a: \"lucio\",\n   //     b: \"daniele\"\n   //   }]\n\n});\n```\n\n## LevelUp integration\n\nLevelGraph allows to leverage the full power of all\n[LevelUp](https://github.com/rvagg/node-levelup) plugins.\n\nInitializing a database with LevelUp support is very easy:\n```javascript\nvar levelup = require(\"level\");\nvar levelgraph = require(\"levelgraph\");\nvar db = levelgraph(levelup(\"yourdb\"));\n```\n\n### Usage with SubLevel\n\nAn extremely powerful usage of LevelGraph is to partition your\nLevelDB with [SubLevel](http://npm.im/level-sublevel):\n\n```javascript\nvar levelup = require(\"level\");\nvar sublevel = require(\"level-sublevel\");\nvar levelgraph = require(\"levelgraph\");\nvar db = sublevel(levelup(\"yourdb\"));\nvar graph = levelgraph(db.sublevel('graph'));\n```\n\n## Browserify\n\nYou can use [browserify](https://github.com/substack/node-browserify) to bundle your module and all the dependencies, including levelgraph, into a single script-tag friendly js file for use in webpages. For the convenience of people unfamiliar with browserify, a pre-bundled version of levelgraph is included in the build folder.\n\nSimply `require(\"levelgraph\")` in your browser modules and use [level.js](https://github.com/maxogden/level.js) instead of `level`:\n\n```javascript\nvar levelgraph = require(\"levelgraph\");\nvar leveljs = require(\"level-js\");\nvar levelup = require(\"levelup\");\nvar factory = function (location) { return new leveljs(location) };\n\nvar db = levelgraph(levelup(\"yourdb\", { db: factory }));\n```\n\n### Testling\n\nFollow the [Testling install instructions](https://github.com/substack/testling#install) and run `testling` in the levelgraph directory to run the test suite against a headless browser using level.js\n\n## RDF support\n\n__LevelGraph__ does not support out of the box loading serialized RDF or storing it. Such functionality is provided by extensions:\n* [LevelGraph-N3](https://github.com/mcollina/levelgraph-n3) - __N3/Turtle__\n* [LevelGraph-JSONLD](https://github.com/mcollina/levelgraph-jsonld) - __JSON-LD__\n\n## Extensions\n\nYou can use multiple extensions at the same time. Just check if one depends on another one\nto nest them in correct order! *(LevelGraph-N3 and LevelGraph-JSONLD are\nindependent)*\n\n```javascript\nvar lg = require('levelgraph');\nvar lgN3 = require('levelgraph-n3');\nvar lgJSONLD = require('levelgraph-jsonld');\n\nvar db = lgJSONLD(lgN3(lg(\"yourdb\")));\n// gives same result as\nvar db = lgN3(lgJSONLD(lg(\"yourdb\")));\n```\n\n## TODO\n\nThere are plenty of things that this library is missing.\nIf you feel you want a feature added, just do it and __submit a\npull-request__.\n\nHere are some ideas:\n\n* [x] Return the matching triples in the search results.\n* [x] Support for Query Planning in search.\n* [x] Added a Sort-Join algorithm.\n* [ ] Add more database operators (grouping, filtering).\n* [x] Browser support\n  [#10](https://github.com/mcollina/levelgraph/issues/10)\n* [ ] Live searches\n  [#3](https://github.com/mcollina/node-levelgraph/issues/3)\n* Extensions\n  * [ ] RDFa\n  * [ ] RDF/XML\n  * [ ] Microdata\n\n## Contributing\n\nLevelGraph is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/mcollina/levelgraph/blob/master/CONTRIBUTING.md) file for more details.\n\n## Credits\n\n*LevelGraph builds on the excellent work on both the LevelUp community\nand the LevelDB and Snappy teams from Google and additional contributors.\nLevelDB and Snappy are both issued under the [New BSD Licence](http://opensource.org/licenses/BSD-3-Clause).*\n\n## Contributors\n\nLevelGraph is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align=\"left\">Matteo Collina</th><td><a href=\"https://github.com/mcollina\">GitHub/mcollina</a></td><td><a href=\"https://twitter.com/matteocollina\">Twitter/@matteocollina</a></td></tr>\n<tr><th align=\"left\">Jeremy Taylor</th><td><a\nhref=\"https://github.com/jez0990\">GitHub/jez0990</a></td></tr>\n<tr><th align=\"left\">Elf Pavlik</th><td><a href=\"https://github.com/elf-pavlik\">GitHub/elf-pavlik</a></td><td><a href=\"https://twitter.com/elfpavlik\">Twitter/@elfpavlik</a></td></tr>\n<tr><th align=\"left\">Riceball LEE</th><td><a href=\"https://github.com/snowyu\">GitHub/snowyu</a></td><td></td></tr>\n<tr><th align=\"left\">Brian Woodward</th><td><a href=\"https://github.com/doowb\">GitHub/doowb</a></td><td><a href=\"https://twitter.com/doowb\">Twitter/@doowb</a></td></tr>\n</tbody></table>\n\n## LICENSE - \"MIT License\"\n\nCopyright (c) 2013-2014 Matteo Collina and LevelGraph Contributors\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "levelgraph@0.10.5",
  "_from": "levelgraph@~0.10.5"
}
